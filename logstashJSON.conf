input {
        http {
                port => 5043
                response_headers => {
                        "Access-Control-Allow-Origin" => "*"
                        "Content-Type" => "text/plain"
                        "Access-Control-Allow-Headers" => "Origin, X-Requested-With, Content-Type,
                        Accept"
                }
        }
}

filter {

        grok{
        match  => { "message" => "%{GREEDYDATA:request}"}
    }

    json{
        source => "request"
        target => "parsedJson"
        remove_field=>["request"]
    }

        mutate {
                
                add_field => {
                  "givenText1" => "%{[parsedJson][text1]}"
                  "givenText2" => "%{[parsedJson][text2]}"
                  "givenText3" => "%{[parsedJson][text3]}"
                  "givenText4" => "%{[parsedJson][text4]}"
                  "scrip" => "%{[parsedJson][scrip]}"
                }

        }

        mutate{
                gsub => ['givenText1',':[\\]','#'] #Replacing :\ by #
                gsub => ['givenText2',':[\\]','#'] #Replacing :\ by #
                gsub => ['givenText3',':[\\]','#'] #Replacing :\ by #
                gsub => ['givenText4',':[\\]','#'] #Replacing :\ by #
        }

        #Boot time Report
        if[scrip] == "31" {
                mutate {
                                gsub => ['givenText1','\r\r ','##newline##']
                                split => ['givenText1','##newline##']
                                }
                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("givenText1")
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]
                                                                lineSplitArr = data.split("=");
                                                                timeduration= ""
                                                                sysStartUpTime = "";
                                                                sysStartUpTime = lineSplitArr[0].sub!(" (", "_")
                                                                sysStartUpTime = lineSplitArr[0].sub!(") ", "")
                                                                sysStartUpTime = lineSplitArr[0].delete(" ")
                                                                timeduration = lineSplitArr[1].delete(" ")
                                                                timetoInt = timeduration.to_i
                                                                event.set("#{sysStartUpTime}",timetoInt)
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }

        }  else if [scrip] == "282" {
                #Battery Status Report
                mutate {
                                gsub => ['givenText1','\r','##newline##']
                                gsub => ['givenText1',':\r',' ']
                                gsub => ['givenText1','\r\r\r','##newline##']
                                split => ['givenText1','##newline##']
                                }
                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("givenText1")
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]
                                                                if(data["AC Power Line Status"])then
                                                                        acstatus = message_array[i+1]
                                                                        i=i+1
                                                                        event.set("ACPowerLineStatus",acstatus)		
                                                                elsif(data["Battery Capacity Status"])then
                                                                        capacitystatus = message_array[i+1]
                                                                        i=i+1
                                                                        event.set("BatteryCapacityStatus",capacitystatus)															
                                                                else
                                                                        lineSplitArr = data.split(":").map(&:strip)

                                                                        if(lineSplitArr.length > 1) then
                                                                                        valueAssigned= ""
                                                                                        txtname = "";
                                                                                        txtname = lineSplitArr[0].sub!("(", "_")
                                                                                        txtname = lineSplitArr[0].sub!(")", "")
                                                                                        txtname = lineSplitArr[0].delete(" ")

                                                                                        if(txtname == "Summary") then
                                                                                        txtname = "BatteryStatus"
                                                                                        end

                                                                                        valueAssignedText = lineSplitArr[1]
                                                                                        valueAssigned = valueAssignedText.delete(" ")
                                                                                        if !/\A\d+\z/.match(valueAssigned)
                                                                                                        event.set("#{txtname}","#{valueAssignedText}")
                                                                                        else
                                                                                                        timetoInt = valueAssignedText.to_i
                                                                                                        event.set("#{txtname}",timetoInt)
                                                                                        end
                                                                        end
                                                                end
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }
                # grok {
                #       patterns_dir => ["/etc/logstash/conf.d/patterns"]
                #       timeout_millis => 300000
                #       match => {
                #               "message" => "%{TECHNOLOGY}%{SPACE}%{CHEMISTRYVAL:Chemistry}%{SPACE}%{TECHNOLOGY}%{SPACE}%{TECHNOLOGYVAL:Technology}%{TECHNOLOGY}%{SPACE}%{INT:CriticalBias:int}%{SPACE}%{TECHNOLOGY}%{SPACE}%{INT:CycleCount:int}%{SPACE}%{LFCC}%{SPACE}%{INT:LastFullChargedCapacity:int}%{SPACE}%{LFCC}%{SPACE}%{INT:DesignedCapacity:int}%{SPACE}%{BWL}%{SPACE}%{BWLVAL:BatteryWearLevel}%{SPACE}%{LFCC}%{SPACE}%{INT:DefaultAlert1:int}%{SPACE}%{LFCC}%{SPACE}%{INT:DefaultAlert2:int}%{SPACE}%{VMV}%{SPACE}%{INT:Voltage:int}%{SPACE}%{VMV}%{SPACE}%{INT:Capacity:int}%{SPACE}%{SERIALNUM}%{SPACE}%{SERIALNUMVAL:serialnumber}%{SPACE}%{SERIALNUM}%{SPACE}%{MANUFACTURERVAL:manufacture}%{SPACE}%{ACPLS}%{DBLSPACE}%{ACPLSVAL:ACPowerLineStatus}%{SPACE}%{ACPLS}%{INT:BatteryFullLifeTime:int}%{SPACE}%{BLT}%{INT:BatteryFullTimeInSec:int}%{SPACE}%{BWL}%{INT:BatteryLifeTimePercentage:int}%{SPACE}%{NEWLINE}%{SPACE}%{TECHNOLOGY}%{SPACE}%{SUMMARY:Summary}"
                #       }

        }else if [scrip] == "174" {     #User Logon Logoff Report
               mutate {
                         
                        add_field => {                                
                                "LogOn" => "%{[parsedJson][string1]}"
                                "LogOff" => "%{[parsedJson][string2]}"                                
                        }
                        gsub => ['LogOn','logon - ','']  
                        gsub => ['LogOff','logoff - ','']  
                }
                mutate {
                                gsub => ['givenText1','\r','##newline##']
                                split => ['givenText1','##newline##']
                                gsub => ['givenText3','\r','##newline##']
                                split => ['givenText3','##newline##']
                        }
                ruby {
                       init => '                               
                                def ParseDart174Field(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                        
                                        if message_array.length
                                        message_array.each_index { |i|
                                                        data = message_array[i]
                                                        lineSplitArr = data.split(":").map(&:strip)

                                                        if(lineSplitArr.length > 1) then
                                                                valueAssigned= ""
                                                                txtname = "";
                                                                if(lineSplitArr[0]["logged in for"])then
                                                                        txtname="LoggedInDuration"
                                                                else
                                                                        txtname = lineSplitArr[0].sub!("(", "_")
                                                                        txtname = lineSplitArr[0].sub!(")", "")
                                                                        txtname = lineSplitArr[0].delete(" ")
                                                                end
                                                                valueAssignedText = lineSplitArr[1]
                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                event.set("#{txtname}","#{valueAssignedText}")
                                                                else
                                                                                timetoInt = valueAssignedText.to_i
                                                                                event.set("#{txtname}",timetoInt)
                                                                end
                                                        end
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart174Field(event,"givenText3")    
                                        ParseDart174Field(event,"givenText1")                                       
                                '  
                                }

        }else if [scrip] == "50" {
                mutate {
                        add_field => {                                
                                "ProcessName" => "%{[parsedJson][executable]}"
                                "FilePath" => "%{[parsedJson][path]}"
                                "FileVersion" => "%{[parsedJson][version]}"                                
                                "ProcessCreationTime" => "%{[parsedJson][entered]}"
                        }
                }

                
        }else if [scrip] == "51" {
                mutate {
                        add_field => {                        
                        "ProcessName" => "%{[parsedJson][executable]}"
                        "FilePath" => "%{[parsedJson][path]}"
                        "FileVersion" => "%{[parsedJson][version]}"
			"t1" => "%{[parsedJson][text1]}"
                        }
                }

		mutate {
                        gsub => ['t1','\r','##newline##']
                        split => ['t1','##newline##']
                }

                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("t1")
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]
                                                                lineSplitArr = data.split(":").map(&:strip)

                                                                if(lineSplitArr.length > 1) then
                                                                      titlename=lineSplitArr[0]
                                                                        valueAssigned= ""
                                                                        txtname = "";
                                                                        if(titlename["Process Id:"])then
                                                                                txtname="ProcessId"
                                                                        elsif(titlename["Total execution time(in second):"])then
                                                                                txtname="ProcessLoadTime"
                                                                        else                                                                        
                                                                                txtname = lineSplitArr[0].sub!("(", "_")
                                                                                txtname = lineSplitArr[0].sub!(")", "")
                                                                                txtname = lineSplitArr[0].delete(" ")
                                                                        end

                                                                        valueAssignedText = lineSplitArr[1]
                                                                        valueAssigned = valueAssignedText.delete(" ")
                                                                        if !/\A\d+\z/.match(valueAssigned)
                                                                                event.set("#{txtname}","#{valueAssignedText}")
                                                                        else
                                                                                timetoInt = valueAssignedText.to_i
                                                                                event.set("#{txtname}",timetoInt)
                                                                        end
                                                                end
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }
                               

                mutate {
                        remove_field => ["t1"] # we no longer need this field
                }
                


        }else if [scrip] == "6" {
                grok {
                        break_on_match => false
                        timeout_millis => 300000
                        match => {
                                "[givenText1]" => "%{GREEDYDATA:ttext1}"
                                "[givenText4]"=>"%{GREEDYDATA:ttext4}"
                        }
                }
                mutate {
                        gsub => ['ttext1',':[\\]','#'] #Replacing :\ by #
                        gsub => ['ttext1','\r','##newline##']
                        split => ['ttext1','##newline##']
                        gsub => ['ttext4',':[\\]','#'] #Replacing :\ by #
                        gsub => ['ttext4','\r','##newline##']
                        split => ['ttext4','##newline##']
                }


                ruby {
                                init => '                               
                                def ParseDart6Field(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                       
                                        title_name=""
                                        j = 0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                                        data = message_array[i]

                                                        if data["Process Image Name"] then
                                                                title_name=""
                                                                j += 1

                                                                data = data.delete("Process Image Name: ")

                                                                event.set("Process#{j}",data)
                                                                title_name = "Process#{j}"
                                                        else                                                                                                    
                                                                if(data.length > 1) then
                                                                        lineSplitArr = data.split(":").map(&:strip)
                                                                        
                                                                        if(lineSplitArr.length > 1) then
                                                                                valueAssigned= ""
                                                                                txtname = "";
                                                                                nval =  lineSplitArr[0]

                                                                                if nval == "Process" then
                                                                                        nval = nval.gsub!("Process", "Name")
                                                                                else
                                                                                        nval = nval.delete(" ")
                                                                                        if(nval["Process"])then
                                                                                                nval = nval.gsub!("Process", "")
                                                                                        end
                                                                                end

                                                                                
                                                                                if(title_name=="")then
                                                                                        txtname = "#{nval}"
                                                                                else
                                                                                        txtname = "#{title_name}_#{nval}"
                                                                                end
                                                                                                                                                                
                                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                                
                                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                                event.set("#{txtname}",valueAssignedText)
                                                                                else
                                                                                                timetoInt = valueAssignedText.to_i
                                                                                                event.set("#{txtname}",timetoInt)
                                                                                end

                                                                        end
                                                                end

                                                        end
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart6Field(event,"ttext1")   
                                        ParseDart6Field(event,"ttext4")                                      
                                '  
                }
                mutate {
                        remove_field => ["ttext1","ttext4"] # we no longer need this field
                }
        }else if [scrip] == "69" or [scrip] == "74" or [scrip] == "292" {
                mutate {
                                gsub => ['[givenText1]','\r','##newline##']
                                split => ['[givenText1]','##newline##']
                        }
                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("givenText1")

                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]

                                                                lineSplitArr = data.split(":").map(&:strip)

                                                                if(lineSplitArr.length > 1) then
                                                                        valueAssigned= ""
                                                                        txtname = "";
                                                                        nval =  lineSplitArr[0]

                                                                        txtname = "#{nval}"
                                                                        txtname = txtname.delete(" ")

                                                                        valueAssignedText = lineSplitArr[1]
                                                                        valueAssigned = valueAssignedText.delete(" ")

                                                                        if !/\A\d+\z/.match(valueAssigned)
                                                                                event.set("#{txtname}","#{valueAssignedText}")
                                                                        else
                                                                                timetoInt = valueAssignedText.to_i
                                                                                event.set("#{txtname}",timetoInt)
                                                                        end


                                                                end
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }

        }else if [scrip] == "44" {
                
                grok {                        
                        match => ['givenText1',"NDIS Network Filter Driver: %{GREEDYDATA:NDISNetworkFilterDriver}"]                       
                }

        }else if [scrip] == "93" {
                # Need to match text4 as well
                grok {
                        break_on_match => false
                        timeout_millis => 300000
                        match => ['givenText1',"Number of processes running: %{INT:NoOfProcessesRunning:int}"]
                        match => ['givenText1',"%{GREEDYDATA:Status}"]
                }

        }else if [scrip] == "94" {      #Dialog Box Report
                mutate {
                        add_field => {
                                "ProcessName" => "%{[parsedJson][executable]}"
                                "FilePath" => "%{[parsedJson][path]}"
                                "WindowTitle" => "%{[parsedJson][windowtitle]}"
                                "WindowText" => "%{[parsedJson][text1]}"
                        }
                }
        }else if [scrip] == "95" {
                grok {
                        patterns_dir => ["/etc/logstash/conf.d/patterns"]
                        break_on_match => false
                        timeout_millis => 300000
                        match => ['givenText1',"%{D95P1:part1}"]
                        match => ['givenText1',"%{D95P2:part2}"]
                        match => ['part2',"Results of file/folder cleanup%{GREEDYDATA:Results}"]
                }

                mutate {
                                gsub => ['part1',':[\\]','']    #Replacing C:\ =>(colon slash):\ => empty
                                gsub => ['part1','\r','##newline##']
                                split => ['part1','##newline##']
                                }
                ruby {
                                code => '
                                        begin

                                                        message_array = event.get("part1")
                                                        title_name=""
                                                        j = 0
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]

                                                                if data["Drive:"] then
                                                                        title_name=""
                                                                        j += 1

                                                                        data = data.delete("Drive:")

                                                                        event.set("Drive#{j}",data)
                                                                        title_name = "Drive#{j}"
                                                                else                                                                                                    
                                                                        if(data.length > 1) then
                                                                                data = data.gsub!(": ", "##spt##")

                                                                                lineSplitArr = data.split("##spt##").map(&:strip)

                                                                                if(lineSplitArr.length > 1) then
                                                                                        valueAssigned= ""
                                                                                        txtname = "";
                                                                                        nval =  lineSplitArr[0]

                                                                                        nval = nval.delete(" ")

                                                                                        txtname = "#{title_name}_#{nval}"
                                                                                        valueAssignedText = lineSplitArr[1]

                                                                                        valueAssigned = valueAssignedText.delete(" ")

                                                                                        if !/\A\d+\z/.match(valueAssigned)
                                                                                                event.set("#{txtname}",valueAssignedText)
                                                                                        else
                                                                                                timetoInt = valueAssignedText.to_i
                                                                                                event.set("#{txtname}",timetoInt)
                                                                                        end

                                                                                end
                                                                        end

                                                                end
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }
                mutate {
                                        remove_field => ["part1","part2"] # we no longer need this field
                                }
        }else if [scrip] == "96" {#Processor Statistics Report
                grok {
                        break_on_match => false
                        timeout_millis => 300000
                        match => {
                                "[givenText1]" => "%{GREEDYDATA:ttext1}"
                                "[givenText4]"=>"%{GREEDYDATA:ttext4}"
                        }
                }
               mutate {
                        gsub => ['ttext1',':[\\]','#'] #Replacing :\ by #
                        gsub => ['ttext1','\r','##newline##']
                        split => ['ttext1','##newline##']
                        gsub => ['ttext4',':[\\]','#'] #Replacing :\ by #
                        gsub => ['ttext4','\r','##newline##']
                        split => ['ttext4','##newline##']
                }


                ruby {
                                init => '                               
                                def ParseDart96Field(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                       
                                        title_name=""
                                        j = 0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                                        data = message_array[i]

                                                        if data["Process Image Name"] then
                                                                title_name=""
                                                                j += 1

                                                                data = data.delete("Process Image Name: ")

                                                                event.set("Process#{j}",data)
                                                                title_name = "Process#{j}"
                                                        else                                                                                                    
                                                                if(data.length > 1) then
                                                                        lineSplitArr = data.split(":").map(&:strip)
                                                                        
                                                                        if(lineSplitArr.length > 1) then
                                                                                valueAssigned= ""
                                                                                txtname = "";
                                                                                nval =  lineSplitArr[0]

                                                                                if nval == "Process" then
                                                                                        nval = nval.gsub!("Process", "Name")
                                                                                else
                                                                                        nval = nval.delete(" ")
                                                                                        if(nval["Process"])then
                                                                                                nval = nval.gsub!("Process", "")
                                                                                        end
                                                                                end

                                                                                
                                                                                if(title_name=="")then
                                                                                        txtname = "#{nval}"
                                                                                else
                                                                                        txtname = "#{title_name}_#{nval}"
                                                                                end
                                                                                                                                                                
                                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                                
                                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                                event.set("#{txtname}",valueAssignedText)
                                                                                else
                                                                                                timetoInt = valueAssignedText.to_i
                                                                                                event.set("#{txtname}",timetoInt)
                                                                                end

                                                                        end
                                                                end

                                                        end
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart96Field(event,"ttext1")   
                                        ParseDart96Field(event,"ttext4")                                      
                                '  
                }
                mutate {
                        remove_field => ["ttext1","ttext4"] # we no longer need this field
                }
        }else if [scrip] == "97" {#Physical Disk Statistics Report
                grok {
                        timeout_millis => 300000
                        match => {
                                "[givenText1]" => "mSec Sampling period: %{INT:mSecSamplingPeriod:int}\r%{GREEDYDATA:i_text}"
                        }
                }
                mutate {
                                gsub => ['i_text','\r','##newline##']
                                gsub => ['i_text',':\r',' ']
                                gsub => ['i_text','\r\r\r','##newline##']
                                split => ['i_text','##newline##']
                                }
                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("i_text")
                                                        drive_name=""
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]
                                                                if data["Drive"] then
                                                                        drive_name=""

                                                                        data = data.delete(":")
                                                                        data = data.delete(" ")
                                                                        drive_name = data.delete("Drive:")

                                                                        if data["_Total"]
                                                                                drive_name = drive_name.sub!("_Total", "Overall")
                                                                        end

                                                                else
                                                                        lineSplitArr = data.split(":").map(&:strip)

                                                                        if(lineSplitArr.length > 1) then                                                                
                                                                                valueAssigned= ""
                                                                                txtname = "";
                                                                                nval =  lineSplitArr[0].delete(" ")

                                                                                txtname = "#{drive_name}_#{nval}"
                                                                                valueAssignedText = lineSplitArr[1]
                                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                        event.set("#{txtname}","#{valueAssignedText}")
                                                                                else
                                                                                        timetoInt = valueAssignedText.to_i
                                                                                        event.set("#{txtname}",timetoInt)
                                                                                end

                                                                        end
                                                                end
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }

                                mutate {
                                        remove_field => ["i_text"] # we no longer need this field
                                }
        }else if [scrip] == "98" {      #Network Statistics Report
                grok {
                        timeout_millis => 300000
                        match => {
                                "[givenText1]" => "mSec sampling period: %{INT:mSecSamplingPeriod:int}\rPercent utilization: %{BASE16FLOAT:PercentUtilization}\r%{GREEDYDATA:i_text}"
                        }
                }
                mutate {
                                gsub => ['i_text','\r','##newline##']
                                split => ['i_text','##newline##']
                                }
                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("i_text")
                                                        title_name=""
                                                        j = 0
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]

                                                                if data["Adapter"] then
                                                                        title_name=""
                                                                        j += 1
                                                                        data = data.delete(":")
                                                                        data = data.delete("Adapter")
                                                                        event.set("AdapterName#{j}",data)
                                                                        title_name = "Adapter#{j}"
                                                                else
                                                                        lineSplitArr = data.split(":").map(&:strip)

                                                                        if(lineSplitArr.length > 1) then                                                                
                                                                                valueAssigned= ""
                                                                                txtname = "";
                                                                                nval =  lineSplitArr[0].delete(" ")

                                                                                txtname = "#{title_name}_#{nval}"
                                                                                valueAssignedText = lineSplitArr[1]
                                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                        event.set("#{txtname}","#{valueAssignedText}")
                                                                                else
                                                                                        timetoInt = valueAssignedText.to_i
                                                                                        event.set("#{txtname}",timetoInt)
                                                                                end

                                                                        end
                                                                end
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }

                                mutate {
                                        remove_field => ["i_text"] # we no longer need this field
                                }

        }else if [scrip] == "77" {

                # grok {
                #         break_on_match => false
                #         timeout_millis => 300000
                #         match => {
                #                 "[givenText1]" => "%{GREEDYDATA:i_text1}"
                #                 "[givenText2]" => "%{GREEDYDATA:i_text2}"

                #         }
                # }

                mutate {
                                gsub => ['givenText1','Problem signature:','@@@']
                                gsub => ['givenText1','Attached files:','@@@']
                                gsub => ['givenText1','These files may be available here:','@@@']
                                gsub => ['givenText1','Analysis symbol','@@@AnalysisSymbol']
                                # gsub => ['givenText1','\r','##newline##']
                                split => ['givenText1','@@@']

                                gsub => ['givenText2','\r','##newline##']
                                split => ['givenText2','##newline##']
                                }
                ruby {
                                init => '     
                                

                                def ParseDart77Field(event,fieldnames)
                                        message_array=event.get(fieldnames)                                        
                                        j = 0
                                        cnt=0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                            data = message_array[i]       
                                                                                               
                                            if(data.length > 1) then 

                                                if(i==2) then
                                                       event.set("AttachedFiles",data) 
                                                elsif(i==3)
                                                        event.set("LocationOfAvailableFiles",data)
                                                else            
                                                                subSplitArr=data.split(/\r/)
                                                                if(subSplitArr.length > 0)then
                                                                        subSplitArr.each_index { |j|
                                                                        subval = subSplitArr[j]                                                        

                                                                        lineSplitArr = subval.split(":").map(&:strip)                                                       
                                                                        if(lineSplitArr.length > 1) then
                                                                                valueAssigned= ""
                                                                                txtname = "";
                                                                                nval =  lineSplitArr[0]
                                                                                
                                                                                nval = nval.delete(" ")
                                                                                txtname = "#{nval}"
                                                                                                                                                                                                                                
                                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                                
                                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                        event.set("#{txtname}",valueAssignedText)
                                                                                else
                                                                                        timetoInt = valueAssignedText.to_i
                                                                                        event.set("#{txtname}",timetoInt)
                                                                                end

                                                                        end
                                                                        }
                                                                end
                                                        end  
                                                end                                                     
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end
                                
                                def ParseDart77Field2(event,fieldnames)
                                        message_array=event.get(fieldnames)

                                        if message_array.length
                                        message_array.each_index { |i|
                                                        data = message_array[i]

                                                        lineSplitArr = data.split(":").map(&:strip)

                                                        if(lineSplitArr.length > 1) then
                                                                        valueAssigned= ""
                                                                        txtname = "";
                                                                        nval =  lineSplitArr[0]

                                                                        txtname = "#{nval}"
                                                                        txtname = txtname.delete(" ")

                                                                        valueAssignedText = lineSplitArr[1]
                                                                        valueAssigned = valueAssignedText.delete(" ")

                                                                        if !/\A\d+\z/.match(valueAssigned)
                                                                                        event.set("#{txtname}","#{valueAssignedText}")
                                                                        else
                                                                                        timetoInt = valueAssignedText.to_i
                                                                                        event.set("#{txtname}",timetoInt)
                                                                        end


                                                        end
                                        }
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end  '

                        code => '
                                        ParseDart77Field(event,"givenText1")   
                                        ParseDart77Field2(event,"givenText2")                                                                      
                                '  
                 }

        }else if [scrip] == "201" {
                grok {
                        match => ['givenText2',"Network monitor status:%{GREEDYDATA:t2}"]
                }
                mutate {
                                gsub => ['t2','\r','##sps##']
                                split => ['t2','##sps##']
                        }
                 ruby {
                                init => '                               
                                def ParseDart201Field(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                       
                                        j = 0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                                data = message_array[i]
                                                if(data.length > 1) then
                                                        lineSplitArr = data.split("=").map(&:strip)
                                                        
                                                        if(lineSplitArr.length > 1) then
                                                                valueAssigned= ""
                                                                txtname = "";
                                                                nval =  lineSplitArr[0]
                                                                
                                                                if(nval["Driver service status"])then
                                                                        txtname = "DriverServiceStatus"
                                                                elsif(nval["Timeout (sec) for local TCP connections"])then
                                                                        txtname = "TimeoutLocalTCP_sec"
                                                                elsif(nval["Timeout (sec) for remote TCP connections"])then
                                                                        txtname = "TimeoutRemoteTCP_sec"   
                                                                elsif(nval["Timeout (sec) for local UDP connections"])then
                                                                        txtname = "TimeoutLocalUDP_sec"                                                                      
                                                                elsif(nval["Timeout (sec) for remote UDP connections"])then
                                                                        txtname = "TimeoutRemoteUDP_sec"
                                                                elsif(nval["Size of domain name cache"])then
                                                                        txtname = "SizeOfDomainNameCache"
                                                                elsif(nval["Number of unmatched sends indicating disconnect"])then
                                                                        txtname = "NoOfDisconnectedUnmatchedSends"
                                                                elsif(nval["Additional HTTP port"])then
                                                                        txtname = "AdditionalHTTPPort"
                                                                else
                                                                        nval = nval.delete(" ")
                                                                        txtname = "#{nval}"
                                                                end
                                                                                                                                                
                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                
                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                event.set("#{txtname}",valueAssignedText)
                                                                else
                                                                                timetoInt = valueAssignedText.to_i
                                                                                event.set("#{txtname}",timetoInt)
                                                                end

                                                        end
                                                end                                                        
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart201Field(event,"t2")                                                                      
                                '  
                }
                mutate {
                                remove_field => ["t2"] # we no longer need this field
                        }
        }else if [scrip] == "234" {
                mutate {
                                gsub => ['[givenText1]','DriveLetter: ','SysVolEncryptStatus_Drive']
                                gsub => ['[givenText1]','Current Temperature','CPUCurTemp']
                                gsub => ['[givenText1]','Instance Name:','InstanceName']
                                gsub => ['[givenText1]','\r','##newline##']
                                split => ['[givenText1]','##newline##']
                        }
                 ruby {
                                init => '                               
                                def ParseDart234Field(event,fieldnames)
                                        message_array=event.get(fieldnames)                                        
                                        j = 0
                                        cnt=0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                                data = message_array[i]                                                        
                                                if(data.length > 1) then             

                                                        lineSplitArr = data.split(":").map(&:strip)                                                       
                                                        if(lineSplitArr.length > 1) then
                                                                valueAssigned= ""
                                                                txtname = "";
                                                                nval =  lineSplitArr[0]
                                                                if(nval["CPUCurTemp"])then
                                                                        cnt=cnt+1
                                                                        txtname = "#{nval}#{cnt}"
                                                                else
                                                                        nval = nval.delete(" ")
                                                                        txtname = "#{nval}"
                                                                end
                                                                                                                                                
                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                
                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                        event.set("#{txtname}",valueAssignedText)
                                                                else
                                                                        timetoInt = valueAssignedText.to_i
                                                                        event.set("#{txtname}",timetoInt)
                                                                end

                                                        end
                                                end  
                                                                                                     
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart234Field(event,"givenText1")                                                                      
                                '  
                 }
         }else if [scrip] == "245" {
                
                mutate {
                                gsub => ['givenText1','<b>Disk Information:</b>','']
                                gsub => ['givenText1','\r','##sps##']
                                split => ['givenText1','##sps##']
                        }
                ruby {
                                init => '                               
                                def ParseDart245Field(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                        puts message_array
                                        j = 0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                                data = message_array[i]                                                        
                                                if(data.length > 1) then                                                        
                                                        lineSplitArr = data.split(":").map(&:strip)                                                       
                                                        if(lineSplitArr.length > 1) then
                                                                valueAssigned= ""
                                                                txtname = "";
                                                                nval =  lineSplitArr[0]
                                                                
                                                                if(nval["Size(bytes)"])then
                                                                        txtname = "SizeInBytes"
                                                                else
                                                                        nval = nval.delete(" ")
                                                                        txtname = "#{nval}"
                                                                end
                                                                                                                                                
                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                
                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                        event.set("#{txtname}",valueAssignedText)
                                                                else
                                                                        timetoInt = valueAssignedText.to_i
                                                                        event.set("#{txtname}",timetoInt)
                                                                end

                                                        end
                                                end  
                                                                                                     
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart245Field(event,"givenText1")                                                                      
                                '  
                }
        }else if [scrip] == "266" {
                grok {
                        patterns_dir => ["/etc/logstash/conf.d/patterns"]
                        timeout_millis => 300000
                        match => ['givenText1',"Connection Status: %{GREEDYDATA:ConnectionStatus}"]
                        match => ['givenText1',"Connection failed, %{GREEDYDATA:ConnectionFailed}"]
                        match => ['givenText1',"Trying to connect to Server: %{GREEDYDATA:TryigToConnectServer}"]
                }

        }else if [scrip] == "286" {
                grok{
                        break_on_match => false
                        patterns_dir => ["/etc/logstash/conf.d/patterns"]
                        timeout_millis => 300000
                        match => ['givenText1',"%{SEQNAME:SequenceName}"]
                        match => ['givenText1',"%{F1:f1}"]
                        match => ['givenText1',"%{F2:f2}"]
                        match => ['givenText1',"%{F3:Status}"]
        }
                mutate {
                                gsub => ['SequenceName','\[','']
                                gsub => ['SequenceName','\]','']
                                }

                                grok{
                                break_on_match => false
                                patterns_dir => ["/etc/logstash/conf.d/patterns"]
                                match => ['f2',"%{UPTOCOLON:new}%{GREEDYDATA:TotalDurationOfSequence}"]
                                }

                                mutate {
                                gsub => ['Status','\r','']
                                gsub => ['TotalDurationOfSequence','\r Sequence','']
                                gsub => ['f1','\\r T','']
                                gsub => ['f1','\\r','##sp##']
                                }

                                mutate {
                                        split => ['f1','##sp##']
                                }

                        ruby {
                                        code => '
                                        begin
                                                        message_array = event.get("f1")

                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]
                                                                message_array2 = data.split(",");
                                                                dart_run_duration= ""
                                                                dart_field = "";
                                                                dart_field = message_array2[0].sub!("DART No:", "")
                                                                dart_run_duration = message_array2[1].sub!("DART run duration:", "")
                                                                dart_run_duration = message_array2[1].sub!("\r T", "")
                                                                dart_field=dart_field.sub!(")", "")
                                                                dart_field=dart_field.sub!("(", "_")
                                                                dart_field=dart_field.delete(" \t\r")

                                                                event.set("#{dart_field}","#{dart_run_duration}")
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                        }



                                mutate {
                                        # gsub => ['TotalDurationOfSequence','\r Sequence','']
                                        # replace => [ "message", "%{content}" ] #replace the message field with the content field ( so it auto append later in it )
                                        remove_field => ["headers","host","@version","new","f2","message","f1","givenText1"] # we no longer need this field
                                        # remove_field => ["headers","host","@timestamp","@version"] # we no longer need this field
                                }
        } else if [scrip] == "263"{
                mutate {
                                gsub => ['givenText1','(\((\w+)\/(\w+)\))','_TotalFree']                 
                }
                
		grok {
                        patterns_dir => ["/etc/logstash/conf.d/patterns"]
                        break_on_match => false
                        timeout_millis => 300000
                        match => ['givenText1',"%{D263P1:part1}"]
                        match => ['givenText1',"%{D263P2:part2}"]
			match => ['givenText1',"%{D263P3:part3}"]
                        match => ['givenText1',"%{D263P4:part4}"]
                        match => ['givenText1',"%{D263P5:part5}"]
                        match => ['givenText1',"%{D263P6:part6}"]						
                        
                }

               mutate {                                
                                gsub => ['part1','\r','##newline##']
                                split => ['part1','##newline##']
                                gsub => ['part2','Total no of Installed antispyware','TotalNo_INST_AntiSpyware']
				gsub => ['part2','\r','##newline##']
                                gsub => ['part2','Installed antivirus list:','']
                                split => ['part2','##newline##']
				gsub => ['part3','\r','##newline##']
                                gsub => ['part3','Installed antispyware list:','']
                                split => ['part3','##newline##']
				gsub => ['part4','\r','##newline##']
                                gsub => ['part4','Antivirus Turned On Or Off :','']
                                split => ['part4','##newline##']
				gsub => ['part5','\r','##newline##']
                                gsub => ['part5','AntiSpyware Turned On Or Off :','']
                                split => ['part5','##newline##']
				gsub => ['part6','\r','##newline##']
                                split => ['part6','##newline##']
								
                }

                ruby {
                        init => '                               
                                def ParseValues(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                        title_name=""	
                                        cnt1=0
                                        cnt2=0
                                        j = 0                                        
                                        if message_array.length
                                        message_array.each_index { |i|
                                                data = message_array[i]												                                                                                                   
                                                if(data.length > 1) then
                                                        if(data["Hard drive size"])then
                                                                data = data.gsub!(":", "##spt##")
                                                                lineSplitArr = data.split("##spt##").map(&:strip)

                                                                if(lineSplitArr.length > 3) then
                                                                        event.set("HardDriveSize_kb",lineSplitArr[3])
                                                                        event.set("HardDriveName",lineSplitArr[1])
                                                                end
                                                        else
                                                                
                                                                data = data.gsub!(":", "##spt##")

                                                                lineSplitArr = data.split("##spt##").map(&:strip)

                                                                if(lineSplitArr.length > 1) then
                                                                                valueAssigned= ""
                                                                                txtname = "";
                                                                                nval =  lineSplitArr[0].delete(" ")
                                                                                
                                                                                if(fieldnames=="part2")then
                                                                                        if(nval["displayName"])then
                                                                                                cnt1=cnt1+1
                                                                                                txtname = "INST_AntiVirus#{cnt1}"
                                                                                        elsif(nval["companyName"])then
                                                                                                txtname = "INST_AntiVirus#{cnt1}_Compy"
                                                                                        elsif(nval["instanceGuid"])then
                                                                                                txtname = "INST_AntiVirus#{cnt1}_GUID"
                                                                                        elsif(nval["versionNumber"])then
                                                                                                txtname = "INST_AntiVirus#{cnt1}_Ver"
                                                                                        else
                                                                                              txtname = "#{nval}"
                                                                                        end
                                                                                elsif(fieldnames=="part3")then
                                                                                        puts nval
                                                                                        if(nval["displayName"])then
                                                                                                cnt2=cnt2+1
                                                                                                txtname = "INST_AntiSpyware#{cnt2}"
                                                                                        elsif(nval["companyName"])then
                                                                                                txtname = "INST_AntiSpyware#{cnt2}_Compy"
                                                                                        elsif(nval["instanceGuid"])then
                                                                                                txtname = "INST_AntiSpyware#{cnt2}_GUID"
                                                                                        elsif(nval["versionNumber"])then
                                                                                                txtname = "INST_AntiSpyware#{cnt2}_Ver"                                                                               
                                                                                        end
                                                                                elsif(fieldnames=="part4")then
                                                                                                txtname = "ANTIVIRUS_#{nval}"
                                                                                elsif(fieldnames=="part5")then
                                                                                                txtname = "ANTISPYWARE_#{nval}"
                                                                                else
                                                                                                txtname = "#{nval}"
                                                                                end
                                                                        
                                                                                if(txtname=="TotalnoofInstalledantivirus")then
                                                                                        txtname = "TotalNo_INST_AntiVirus"
                                                                                end                                                                                
                                                                                
                                                                                valueAssignedText = lineSplitArr[1]

                                                                                valueAssigned = valueAssignedText.delete(" ")

                                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                                                event.set("#{txtname}",valueAssignedText)
                                                                                else
                                                                                                timetoInt = valueAssignedText.to_i
                                                                                                event.set("#{txtname}",timetoInt)
                                                                                end
                                                                        end
                                                                end                                                                        
                                                end
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseValues(event,"part1")
                                        ParseValues(event,"part2")
                                        ParseValues(event,"part3")
                                        ParseValues(event,"part4")
                                        ParseValues(event,"part5")
                                        ParseValues(event,"part6")
                                '     
                }

                mutate {remove_field=>["part1","part2","part3","part4","part5","part6"]}
        }else if [scrip] == "293" {
                        grok {
                        match => {
                                "message" => "Nanoheal AV: %{GREEDYDATA:NanohealAntivirus}"
                        }
                }
        }else if [scrip] == "298" {
                
                mutate {                                
                                gsub => ['givenText1','\r','##sps##']
                                split => ['givenText1','##sps##']
                        }
                ruby {
                                init => '                               
                                def ParseDart298Field(event,fieldnames)
                                        message_array=event.get(fieldnames)
                                        cnt=0
                                        j = 0
                                        if message_array.length > 1
                                        message_array.each_index { |i|
                                                data = message_array[i]                                                        
                                                if(data.length > 1) then                                                        
                                                        lineSplitArr = data.split(":").map(&:strip)                                                       
                                                        if(lineSplitArr.length > 1) then
                                                                valueAssigned= ""
                                                                txtname = "";
                                                                nval =  lineSplitArr[0]
                                                                
                                                                if(nval["Installed Drivers"])then
                                                                        cnt=cnt+1
                                                                        txtname = "InstalledDrivers#{cnt}"
                                                                else
                                                                        nval = nval.delete(" ")
                                                                        txtname = "#{nval}"
                                                                end
                                                                                                                                                
                                                                valueAssignedText = lineSplitArr[1]                                                                                
                                                                valueAssigned = valueAssignedText.delete(" ")
                                                                
                                                                if !/\A\d+\z/.match(valueAssigned)
                                                                        event.set("#{txtname}",valueAssignedText)
                                                                else
                                                                        timetoInt = valueAssignedText.to_i
                                                                        event.set("#{txtname}",timetoInt)
                                                                end

                                                        end
                                                end  
                                                                                                     
                                        }
                                        
                                end
                                rescue Exception => e
                                        puts %{ruby_exception_#{__method__.to_s} - #{e}}
                                end'

                        code => '
                                        ParseDart298Field(event,"givenText1")                                                                      
                                '  
                }
        }else if [scrip] == "300" {
                mutate {
                                gsub => ['givenText1','\r','##newline##']
                                split => ['givenText1','##newline##']
                                }
                ruby {
                                code => '
                                        begin
                                                        message_array = event.get("givenText1")

                                                        if (message_array.length == 3)then
                                                                event.set("URL",message_array[0])
                                                                event.set("Status",message_array[1])
                                                                res_code=message_array[2]
                                                                res_code=res_code.sub!("Response code :", "")
                                                                event.set("ResponseCode",res_code)
                                                        elsif (message_array.length == 2)then
                                                                event.set("URL",message_array[0])
                                                                event.set("Status",message_array[1])
                                                        elsif (message_array.length == 1)then
                                                                event.set("URL",message_array[0])
                                                        end
                                        end
                                                        '
                }

        }else if [scrip] == "303"{
			mutate {						
						gsub => ['givenText1','\r','##newline##']
						split => ['givenText1','##newline##']
					}
			ruby {
                                code => '
                                        begin
                                                        message_array = event.get("givenText1")
							cnt=0
                                                        if message_array.length
                                                        message_array.each_index { |i|
                                                                data = message_array[i]
                                                                        
                                                                        cnt = cnt + 1
                                                                        splitArr = data.split(",")
                                                                        
                                                                        if splitArr.length > 0
                                                        		splitArr.each_index { |j|

                                                                        lineSplitArr = splitArr[j].split(":").map(&:strip)
                                                                        
                                                                        if(lineSplitArr.length > 1) then
                                                                                        valueAssigned= ""
                                                                                        txtname = "";
                                                                                        nval =  lineSplitArr[0]

                                                                                        txtname = "#{nval}_#{cnt}"
                                                                                        txtname = txtname.delete(" ")

                                                                                        valueAssignedText = lineSplitArr[1]
                                                                                        valueAssigned = valueAssignedText.delete(" ")

                                                                                        if !/\A\d+\z/.match(valueAssigned)
                                                                                                        event.set("#{txtname}","#{valueAssignedText}")
                                                                                        else
                                                                                                        timetoInt = valueAssignedText.to_i
                                                                                                        event.set("#{txtname}",timetoInt)
                                                                                        end


                                                                        end
                                                                        }
                                                                end	
                                                        }
                                                        end
                                        rescue Exception => e
                                        puts e.message
                                        end
                                        '
                                }
		}else{
                        grok {
                                match => {
                                        "message" => "%{GREEDYDATA:text1}"
                                }
                        }
        }

        ruby {
                        code => "
                        hash = event.get('parsedJson')
                        hash.each do |k,v|
                                if '-' == v
                                event.remove(k)
                                else
                                if v.is_a? String
                                        v.strip!
                                        v.gsub!('`', ',')
                                        event.set(k, v)
                                end
                                end
                        end
                        "
                }

                mutate {
                                remove_field => ["headers","host","@version","message","parsedJson","givenText1","givenText2","givenText3","givenText4"] # we no longer need this field
                        }
}

output {
        elasticsearch {
                hosts => ["localhost:9200"]
                index  => "event_i_%{+YYYY.MM.dd}"
                document_type => "events"
                template => "/etc/logstash/conf.d/template/event_new.json"
                
        }
        # stdout { codec => rubydebug }
}

# output {
#       elasticsearch {
#               hosts => ["127.0.0.1:9200"]
#               index  => "event_indu%{+YYYY.MM.dd}"
#               document_type => "events"
#       }
#       #stdout { codec => rubydebug }
# }
# C:\elk\logstash\patterns
# output {
#       elasticsearch {
#               hosts => ["35.224.248.121:9200"]
#               index  => "event_new_%{+YYYY.MM.dd}"
#               document_type => "events"
#       }
#       stdout { codec => rubydebug }
# }

